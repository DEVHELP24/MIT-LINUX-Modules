#!/bin/bash

# Script: debugview-ng
# Author: [NAZY-OS]
# Description: [Shows various system errors and warnings]

# Usage function
usage() {
    echo "Usage: $0 [-h] [-m] [-e] [-s] [-x] [-o output_directory]" >&2
    echo "  -h: Display this help message"
    echo "  -m: List loaded kernel modules"
    echo "  -e: Check for errors related to kernel modules"
    echo "  -s: Find errors related to systemd services during startup"
    echo "  -x: Find errors and warnings in Xorg logs"
    echo "  -o output_directory: Specify the output directory to save results"
    exit 1
}

# Function to get loaded kernel modules
get_kernel_modules() {
    lsmod | awk '{print $1}'
}

# Enhanced function to check for kernel module errors and warnings
check_module_errors() {
    local result="Checking for errors related to kernel modules:\n"

    result+="Checking dmesg for module errors or warnings:\n"
    result+=$(dmesg | grep -iE "(modprobe|insmod|rmmod|module.*(failed|not found|error|denied|unknown symbol|unresolved symbol|init failed))" || echo "No dmesg errors found.\n")
    result+="\n"

    if command -v journalctl &> /dev/null; then
        result+="Checking journalctl for module errors or warnings:\n"
        result+=$(journalctl -k | grep -iE "(modprobe|insmod|rmmod|module.*(failed|not found|error|denied|unknown symbol|unresolved symbol|init failed))" || echo "No journalctl errors found.\n")
        result+="\n"
    else
        result+="journalctl is not available.\n"
    fi

    if [[ -f /var/log/kern.log ]]; then
        result+="Checking /var/log/kern.log for module errors or warnings:\n"
        result+=$(grep -iE "(modprobe|insmod|rmmod|module.*(failed|not found|error|denied|unknown symbol|unresolved symbol|init failed))" /var/log/kern.log || echo "No kern.log errors found.\n")
        result+="\n"
    else
        result+="/var/log/kern.log is not available.\n"
    fi

    if [[ -f /var/log/syslog ]]; then
        result+="Checking /var/log/syslog for module errors or warnings:\n"
        result+=$(grep -iE "(modprobe|insmod|rmmod|module.*(failed|not found|error|denied|unknown symbol|unresolved symbol|init failed))" /var/log/syslog || echo "No syslog errors found.\n")
        result+="\n"
    else
        result+="/var/log/syslog is not available.\n"
    fi

    echo -e "$result"
}

# Function to save results to output directory
save_results() {
    local output_dir=$1
    local output_file=$2
    local content=$3

    if [[ ! -d "$output_dir" ]]; then
        echo "Error: Output directory $output_dir does not exist." >&2
        return 1
    fi

    echo -e "Saving results to ${output_dir}/${output_file}"
    echo -e "$content" > "${output_dir}/${output_file}"
    chmod 666 "${output_dir}/${output_file}"
}

# Generate output filename based on selected options
generate_output_filename() {
    local filename="ng_global_debug_results_$(date +'%Y%m%d%H%M')"

    [[ "$list_modules" == true ]] && filename+="_modules"
    [[ "$check_errors" == true ]] && filename+="_errors"
    [[ "$check_systemd_errors" == true ]] && filename+="_systemd_errors"
    [[ "$check_xorg_debug" == true ]] && filename+="_xorg_debug"

    echo "${filename}.txt"
}

# Default values
output_directory=""

# Parse command-line options
while getopts ":hmesxo:" opt; do
    case ${opt} in
        h) usage ;;
        m) list_modules=true ;;
        e) check_errors=true ;;
        s) check_systemd_errors=true ;;
        x) check_xorg_debug=true ;;
        o) output_directory=$OPTARG ;;
        :) echo "Error: Option -$OPTARG requires an argument." >&2; usage ;;
        \?) echo "Error: Invalid option -$OPTARG" >&2; usage ;;
    esac
done
shift $((OPTIND -1))

# Main script logic
result=""

if [[ -z "$list_modules" && -z "$check_errors" && -z "$check_systemd_errors" && -z "$check_xorg_debug" ]]; then
    echo "Error: No option selected. Please use at least one of the available options." >&2
    usage
fi

# List loaded kernel modules (-m option)
if [[ "$list_modules" == true ]]; then
    result+="Loaded kernel modules:\n"
    result+=$(get_kernel_modules)
    result+="\n"
fi

# Check kernel module errors (-e option)
if [[ "$check_errors" == true ]]; then
    result+="$(check_module_errors)"
    result+="\n"
fi

# Find errors related to systemd services during startup (-s option)
if [[ "$check_systemd_errors" == true ]]; then
    result+="Finding errors related to systemd services during startup:\n"
    failed_services=$(systemctl list-units --state=failed --type=service --no-legend)
    if [[ -n "$failed_services" ]]; then
        result+="$failed_services\n"
    else
        result+="No failed systemd services found during startup.\n"
    fi
    result+="\n"
fi

# Find errors and warnings in Xorg logs (-x option)
if [[ "$check_xorg_debug" == true ]]; then
    result+="Finding errors and warnings in Xorg logs:\n"
    result+=$(grep -iE '^\[.*\] \(EE\)|^\[.*\] \(WW\)' /var/log/Xorg.0.log || echo "No Xorg errors found.\n")
    result+="\n"
fi

# Save results to the output directory if specified (-o option)
if [[ -n "$output_directory" ]]; then
    output_filename=$(generate_output_filename)
    save_results "$output_directory" "$output_filename" "$result"
else
    echo -e "$result"
fi
